# -*- coding: utf-8 -*-
"""Minesweeper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fJdwJmyo1QVDK6sWse6uoD8zHXg-u_2C
"""

import random
import queue
import math

class Square:

  def __init__(self, mine=False, proximity=0, visible=None):  
    self.mine = mine
    self.proximity = proximity
    self.visible = visible

  def getMine(self):
    return self.mine

  def setMine(self, mine=True):
    self.mine = mine
    return

  def getProximity(self):
    return self.proximity

  def setProximity(self, proximity):
    self.proximity = proximity
    return

  def getVisible(self):
    return self.visible

  def setVisible(self, visible):
    self.visible = visible
    return

  def __str__(self):
    if self.visible == None:
      return "-"
    if not self.getVisible():
      return str(self.proximity)
    if self.getMine():
      return "M"
    return str(self.proximity)

def generateBoard(d, n):
  board = [[Square() for x in range(d)] for x in range(d)]
  
  x = 0
  while (n > x):
    i = random.randint(0, d-1)
    j = random.randint(0, d-1)
    if (board[i][j].getMine() == False):
        board[i][j].setMine(True)
        x+=1
  
  for i in range(d):
     for j in range(d):
       board[i][j].setProximity(checkSurrounding(board, i, j))

  return board

def checkSurrounding(board, i, j):
  count = 0

  for x in range(i-1, i+2):
    for y in range(j-1, j+2):
      if (x >= 0 and y >= 0):
        if (x < len(board) and y < len(board)):
          if (board[x][y].getMine()):
            count += 1

  return count

def printBoard(board):
  for x in range(len(board)):
     for y in range(len(board)):
       print(str(board[x][y]), end=" ")
     print("\n")

#FOR TESTING
board = generateBoard(5, 3)
printBoard(board)

def getNewNeighbors(board, i, j):
  ret = []
  
  for x in range(i-1, i+2):
    for y in range(j-1, j+2):
      if (x != i or y != j):
        if (x >= 0 and y >= 0):
          if (x < len(board) and y < len(board)):
            if (board[x][y].getVisible() == None):
              ret.append((x, y))

  return ret

def basicAgent(d, n):
  board = generateBoard(d, n)
  knowledge = queue.PriorityQueue()
  bombCount = 0
  while bombCount < n:
    printBoard(board)
    if (knowledge.empty()):
      i = random.randint(0, len(board)-1)
      j = random.randint(0, len(board)-1)
      print(str(i) + " " + str(j))
      board[i][j].setVisible(True)
      for (x, y) in getNewNeighbors(board, i, j):
        board[x][y].setVisible(False)
        knowledge.put((board[x][y].getProximity(),  (x, y)))
      if board[i][j].getMine():
        bombCount += 1
      #solveNeighbors(board, knowledge)
      continue
    else:
      (prox, (i, j)) = knowledge.get()
      print(str(i) + " " + str(j))
      board[i][j].setVisible(True)
      for (x, y) in getNewNeighbors(board, i, j):
        board[x][y].setVisible(False)
        knowledge.put((board[x][y].getProximity(),  (x, y)))
      if board[i][j].getMine():
        bombCount += 1
      #solveNeighbors(board, knowledge)
      continue
  printBoard(board)

basicAgent(5, 3)